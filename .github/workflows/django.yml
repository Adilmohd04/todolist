name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Adjust the branch name if necessary
  pull_request:
    branches:
      - main  # Runs on pull requests targeting the 'main' branch

jobs:
  tests:
    runs-on: ubuntu-24.04  # Updated to ubuntu-24.04 for future compatibility

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'  # Adjust Python version if required

      # Step 3: Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest flake8 black

      # Step 4: Start the backend server (Django example)
      - name: Start Django server
        run: python manage.py runserver 0.0.0.0:8000 &
        env:
          DJANGO_SETTINGS_MODULE: myproject.settings  # Set your settings module if required

      # Step 5: Wait for the server to be ready
      - name: Wait for server to be ready
        run: |
          npx wait-on http://127.0.0.1:8000
        env:
          WAIT_ON_TIMEOUT: 60000  # Timeout in milliseconds (optional)

      # Step 6: Run unit tests
      - name: Run unit tests
        run: python manage.py test todo.tests

      # Step 7: Run integration tests
      - name: Run integration tests
        run: python manage.py test todo.tests_integration

      # Step 8: Upload test coverage report (optional)
      - name: Upload coverage report
        uses: actions/upload-artifact@v3  # Updated to v3
        with:
          name: coverage-report
          path: .coverage  # Adjust if coverage report is elsewhere

  e2e-tests:
  runs-on: ubuntu-latest
  steps:
    # Step 1: Checkout repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 2: Set up Node.js
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    # Step 3: Install dependencies (including Cypress)
    - name: Install dependencies
      run: npm install --save-dev cypress
      working-directory: ./todo/cypress

    # Step 4: Cache Cypress binary
    - name: Cache Cypress binary
      uses: actions/cache@v3
      with:
        path: ~/.cache/Cypress
        key: ${{ runner.os }}-cypress-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-cypress-

    # Step 5: Install Cypress binary
    - name: Install Cypress binary
      run: npx cypress install

    # Step 6: Set Cypress permissions
    - name: Set Cypress permissions
      run: chmod +x ./todo/cypress/node_modules/.bin/cypress

    # Step 7: Run Cypress tests
    - name: Run Cypress tests
      run: |
        npx cypress run --config baseUrl=https://adil001.pythonanywhere.com
      working-directory: ./todo/cypress

    # Optional Step 8: Upload Cypress test results
    - name: Upload Cypress test results
      uses: actions/upload-artifact@v3
      with:
        name: cypress-test-results
        path: ./todo/cypress/cypress/results/
